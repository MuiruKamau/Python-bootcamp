{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ec3251b6",
   "metadata": {},
   "source": [
    "# list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8941db8",
   "metadata": {},
   "source": [
    "A list is a collection which is ordered and changeable.Allows duplicate members."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "116fa363",
   "metadata": {},
   "source": [
    "#### Indexing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1c1f52a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ovacado'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#accessing the third item\n",
    "mylist = [\"banana\",\"berries\",\"ovacado\",\"mangoes\",\"ginger\"]\n",
    "mylist[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0c68025a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['berries', 'ovacado', 'mangoes']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Range of negative indexes\n",
    "#return from berries to mangoes\n",
    "mylist[-4:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "84738db1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yes True\n"
     ]
    }
   ],
   "source": [
    "#checking if item exists\n",
    "print(\"yes\" ,\"ovacado\" in mylist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd85d496",
   "metadata": {},
   "source": [
    "### change list items\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bdea6bc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'berries', 'ovacado', 'mangoes', 'ginger']\n"
     ]
    }
   ],
   "source": [
    "#Going the same list\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6d83b614",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'melon', 'ovacado', 'mangoes', 'ginger']\n"
     ]
    }
   ],
   "source": [
    "#change the second value\n",
    "mylist[1] = \"melon\"\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bae4edaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'melon', 'passion', 'pawpaw', 'pairs']\n"
     ]
    }
   ],
   "source": [
    "#also change a range of value eg from ovacado to ginger\n",
    "mylist[2:5] =[\"passion\",\"pawpaw\",\"pairs\"]\n",
    "print(mylist)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee0231b0",
   "metadata": {},
   "source": [
    "##### Using insert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "adbc1454",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'melon', 'passion', 'pawpaw', 'pairs']\n"
     ]
    }
   ],
   "source": [
    "#insert items without replacing the existing ones\n",
    "#with insert you can insert an item with a specified index\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "66075701",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'melon', 'plums', 'passion', 'pawpaw', 'pairs']\n"
     ]
    }
   ],
   "source": [
    "# we are going to insert plums as the third item\n",
    "mylist.insert(2,\"plums\")\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08c148b8",
   "metadata": {},
   "source": [
    "### Add to Lists"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7f09109",
   "metadata": {},
   "source": [
    "##### Using append"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "54c8d691",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'melon', 'plums', 'passion', 'pawpaw', 'pairs']\n"
     ]
    }
   ],
   "source": [
    "#you can use append to add items at the end of the list\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "26e83f1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'melon', 'plums', 'passion', 'pawpaw', 'pairs', 'kiwi']\n"
     ]
    }
   ],
   "source": [
    "mylist.append(\"kiwi\")\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b29767d8",
   "metadata": {},
   "source": [
    "##### Extend list\n",
    "You can append element from any iterable be it a list , tuple ,dictionary etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fb0b1e33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry', 'kiwi', 'orange']\n"
     ]
    }
   ],
   "source": [
    "thislist = [\"apple\",\"banana\",\"cherry\"]\n",
    "thistuple = (\"kiwi\",\"orange\")\n",
    "thislist.extend(thistuple)\n",
    "print(thislist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "859fdb4c",
   "metadata": {},
   "source": [
    "### Remove List items"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2adf2cd4",
   "metadata": {},
   "source": [
    "##### Using pop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6d16d923",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry', 'kiwi', 'orange']\n"
     ]
    }
   ],
   "source": [
    "#you can specify the item to be removed or it will always remove the last item\n",
    "print(thislist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "beb8b416",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry', 'kiwi']\n"
     ]
    }
   ],
   "source": [
    "thislist.pop()\n",
    "print(thislist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ad88251",
   "metadata": {},
   "source": [
    "#####  del keyword \n",
    "Removes the specified item or it can delete the list completely"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ab05a872",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'kiwi']\n"
     ]
    }
   ],
   "source": [
    "#Remove the third item\n",
    "del thislist[2]\n",
    "print(thislist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11b1d473",
   "metadata": {},
   "source": [
    "##### clear() \n",
    "It clears the whole list but the list still remains"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db9f8e10",
   "metadata": {},
   "source": [
    "### Loop Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b8a8e446",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "banana\n",
      "cherry\n"
     ]
    }
   ],
   "source": [
    "thelist = [\"apple\",\"banana\",\"cherry\"]\n",
    "for x in thelist:\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7788e8b4",
   "metadata": {},
   "source": [
    "Loop through the index number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ce8cd6bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "banana\n",
      "cherry\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(thelist)):\n",
    "    print(thelist[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99ca8559",
   "metadata": {},
   "source": [
    "Using a while loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "61d46001",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "banana\n",
      "cherry\n"
     ]
    }
   ],
   "source": [
    "i=0\n",
    "while i < len(thelist):\n",
    "    print(thelist[i])\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18c9b34a",
   "metadata": {},
   "source": [
    "### List comprehension"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8e59b502",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apple\n",
      "banana\n",
      "cherry\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[None, None, None]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[print(x) for x in thelist]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ad034110",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana']\n"
     ]
    }
   ],
   "source": [
    "#Want only those fruits with an a \n",
    "fruits=[\"apple\",\"banana\",\"cherry\",\"kiwi\"]\n",
    "newlist = [x for x in fruits if \"a\" in x]\n",
    "print(newlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "eac34919",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "#create an iterable using range that accepts only numbers lower than 5\n",
    "iterable=[x for x in range(10) if x<5]\n",
    "print(iterable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5fb1cbb6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['APPLE', 'BANANA', 'CHERRY', 'KIWI']\n"
     ]
    }
   ],
   "source": [
    "#you manipulate the list\n",
    "newlistupper=[x.upper() for x in fruits]\n",
    "print(newlistupper)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbe61323",
   "metadata": {},
   "source": [
    "### Sort Lists\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "c2acbde4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'kiwi', 'mango', 'orange', 'pineapple']\n"
     ]
    }
   ],
   "source": [
    "#using sort()\n",
    "theselist=[\"orange\",\"mango\",\"kiwi\",\"pineapple\",\"banana\"]\n",
    "theselist.sort()\n",
    "print(theselist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a94bc359",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['pineapple', 'orange', 'mango', 'kiwi', 'banana']\n"
     ]
    }
   ],
   "source": [
    "#sort in a descending order\n",
    "theselist.sort(reverse=True)\n",
    "print(theselist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a03e5563",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'kiwi', 'mango', 'orange', 'pineapple']\n"
     ]
    }
   ],
   "source": [
    "#reverse irregardless of the order\n",
    "theselist.reverse()\n",
    "print(theselist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4de38904",
   "metadata": {},
   "source": [
    "### Copy a List"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "83e2afd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['banana', 'kiwi', 'mango', 'orange', 'pineapple']\n"
     ]
    }
   ],
   "source": [
    "#Changes made from the previsiou list won't affect our current list\n",
    "MyList = theselist.copy()\n",
    "print(MyList)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11407522",
   "metadata": {},
   "source": [
    "### Join Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "bae41faf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'B', 'C', 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "#Using addition sign\n",
    "list1 = [\"A\",\"B\",\"C\"]\n",
    "list2 = [1,2,3]\n",
    "list3 = list1 + list2\n",
    "print(list3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a03b8506",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'B', 'C', 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "#append list 2 into lis1\n",
    "for x in list2:\n",
    "    list1.append(x)\n",
    "print(list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "44d6b1df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'B', 'C', 1, 2, 3, 1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "#use extend()\n",
    "list1.extend(list2)\n",
    "print(list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bb29d5b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
